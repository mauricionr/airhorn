/*
 *
 *  Air Horner
 *  Copyright 2015 Google Inc. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the 'License');
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an 'AS IS' BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License
 *
 */
(function () {
  'use strict';
<<<<<<< 0e8e765e12a7c688f1d6d860a24ebed0c3d55675

  var AmbientLightController = function(lightThreshold) {

    this.start = function() {
      if(!!window.AmbientLightSensor) {
        var sensor = new AmbientLightSensor();
        sensor.onchange = function(e) {
          var illuminance = e.reading.illuminance;
          if(illuminance < lightThreshold) {
            this.onUnderThreshold();
          }
          else {
            this.onOverThreshold();
          }
        }.bind(this);
        sensor.start();
      }
    };

    this.stop = function() {
      sensor.stop();
    };

    this.onUnderThreshold = function() {};
    this.onOverThreshold = function() {};
  };

  var Horn = function() {
    // The Horn Player.

    var audioSrc = '/sounds/airhorn.mp3';
    var noAudioContext = false;
    var fallbackAudio;
    var audioCtx = (window.AudioContext || window.webkitAudioContext);
    var self = this;
    var source;
    var buffer;

    if (audioCtx !== undefined) {
      audioCtx = new audioCtx();
    } else  {
      noAudioContext = true;
      fallbackAudio = document.createElement('audio');
    }

    var loadSound = function(callback) {
      callback = callback || function() {};

      if (noAudioContext) {
        fallbackAudio.src = audioSrc;
        return;
      }

      if(!!buffer == true) {
        // If the buffer is already loaded, use that.
        callback(buffer);
        return;
      }

=======
  var Horn = function () {
    var audioCtx = new (window.AudioContext || window.webkitAudioContext)();
    var self = this;
    var source;
    var buffer;
    var loadSound = function (callback) {
      callback = callback || function () { };
      if (!!buffer == true) {
        callback(buffer);
        return;
      }
>>>>>>> estudandoooo
      var xhr = new XMLHttpRequest();
      xhr.onload = function () {
        audioCtx.decodeAudioData(xhr.response, function (decodedBuffer) {
          callback(decodedBuffer);
        });
      };
<<<<<<< 0e8e765e12a7c688f1d6d860a24ebed0c3d55675

      xhr.open('GET', audioSrc);
=======
      xhr.open('GET', '/sounds/airhorn.mp3');
>>>>>>> estudandoooo
      xhr.responseType = 'arraybuffer';
      xhr.send();
    };

    this.start = function (opts) {
      var shouldLoop = opts.loop; // always loop if from an event.
<<<<<<< 0e8e765e12a7c688f1d6d860a24ebed0c3d55675

      if (noAudioContext) {
        fallbackAudio.loop = shouldLoop;
        fallbackAudio.currentTime = 0;
        fallbackAudio.play();
        return;
      }

      loadSound(function(tmpBuffer) {
        source = audioCtx.createBufferSource();

        source.connect(audioCtx.destination);

        source.buffer = tmpBuffer;

        source.onended = function () {
          self.stop();
        };

=======
      loadSound(function (tmpBuffer) {
        source = audioCtx.createBufferSource();
        source.connect(audioCtx.destination);
        source.buffer = tmpBuffer;
        source.onended = function () {
          self.stop();
        };
>>>>>>> estudandoooo
        source.start(0);
        source.loop = shouldLoop;
        source.loopStart = 0.24;
        source.loopEnd = 0.34;

      });
    };

    this.stop = function () {
      if (!!source === true)
        source.loop = false;

      if (noAudioContext) {
        fallbackAudio.loop = false;
        fallbackAudio.pause();
      }

      this.onstopped();
    };
<<<<<<< 0e8e765e12a7c688f1d6d860a24ebed0c3d55675

    this.onstopped = function() {};

    var init = function() {
=======
>>>>>>> estudandoooo

    this.onstopped = function () { };
    var init = function () {
      loadSound(function (decodedBuffer) {
        buffer = decodedBuffer;
      });
    };
    init();
  };

<<<<<<< 0e8e765e12a7c688f1d6d860a24ebed0c3d55675
  var Installer = function(root) {

    var tooltip = root.querySelector('.tooltip');

    var install = function(e) {
      e.preventDefault();
      window.install.prompt()
        .then(function(outcome) {
          // The user actioned the prompt (good or bad).
          ga('send', 'event', 'install', outcome);
          root.classList.remove('available');
        })
        .catch(function(installError) {
          // Boo. update the UI.
=======
  var Installer = function (root) {
    var tooltip = root.querySelector('.tooltip');
    var install = function (e) {
      e.preventDefault();
      window.install.prompt()
        .then(function () {
          ga('send', 'event', 'install', 'installed');
          root.classList.remove('available');
        })
        .catch(function (installError) {
>>>>>>> estudandoooo
          ga('send', 'event', 'install', 'errored');
        });
    };

<<<<<<< 0e8e765e12a7c688f1d6d860a24ebed0c3d55675
    var init = function() {
=======
    var init = function () {
>>>>>>> estudandoooo
      window.install.canPrompt()
        .then(function () {
          root.classList.add('available');
          ga('send', 'event', 'install', 'prompted');
        });
    };

    root.addEventListener('click', install.bind(this));
    root.addEventListener('touchend', install.bind(this));

    init();
  };

<<<<<<< 0e8e765e12a7c688f1d6d860a24ebed0c3d55675
  var AirHorn = function(root) {
    // Controls the AirHorn.

    var airhornImage = root.querySelector('.horn');
=======
  var AirHorn = function (root) {
    var airhornImage = root.querySelector(".horn");
>>>>>>> estudandoooo
    var horn = new Horn();
    var start = function (e) {
      if (!!e == true) {
        e.preventDefault();
        if (e.touches && e.touches.length > 1) {
          return false;
        }
      }
<<<<<<< 0e8e765e12a7c688f1d6d860a24ebed0c3d55675

      this.start({loop: true});
    }

    var stop = function(e) {
      if(!!e == true) e.preventDefault();
=======
      this.start({ loop: true });
    }

    var stop = function (e) {
      if (!!e == true) e.preventDefault();
>>>>>>> estudandoooo
      this.stop();
    }

    this.start = function (opts) {
      airhornImage.classList.add('horning');
      horn.start(opts);

<<<<<<< 0e8e765e12a7c688f1d6d860a24ebed0c3d55675
      horn.onstopped = function() {
=======
      horn.onstopped = function () {
>>>>>>> estudandoooo
        airhornImage.classList.remove('horning');
      };
      ga('send', 'event', 'horn', 'play');
    };

    this.stop = function () {
      airhornImage.classList.remove('horning');
      horn.stop();
    };
<<<<<<< 0e8e765e12a7c688f1d6d860a24ebed0c3d55675

    airhornImage.addEventListener('mousedown', start.bind(this));
    airhornImage.addEventListener('touchstart', start.bind(this));

    document.documentElement.addEventListener('mouseup', stop.bind(this));
    document.documentElement.addEventListener('touchend', stop.bind(this));

  };

(function() {

  var deferredInstall;
  var promptTriggered = false;
  // The resolve function that will be called when we know we can prompt.
  var canPromptPromiseResolved;
  var canPromptPromise = new Promise(function(resolve, reject) {
    // The resolve will be called later when we know the prompt has been shown.
    // We might want to reject after a timeout of a couple of seconds.
    canPromptPromiseResolved = resolve;
  });


  window.addEventListener('beforeinstallprompt',function(e) {
=======
    airhornImage.addEventListener("mousedown", start.bind(this));
    airhornImage.addEventListener("touchstart", start.bind(this));
    document.documentElement.addEventListener("mouseup", stop.bind(this));
    document.documentElement.addEventListener("touchend", stop.bind(this));
  };

  (function () {

    var deferredInstall;
    var promptTriggered = false;

    var handleInstall = function (userChoice) {
      return new Promise(function (resolve, reject) {
        // Abstracts the user choice
        userChoice.then(function (choice) {
          resolve(choice);
        }).catch(function () {
          reject();
        });
      });
    };

    var canPromptPromiseResolve;
    var canPromptPromise = new Promise(function (resolve, reject) {
      canPromptPromiseResolve = resolve;
    });

    window.addEventListener("beforeinstallprompt", function (e) {
      promptTriggered = true;
      e.preventDefault();
      deferredInstall = e;
      canPromptPromiseResolve();
      return false;
    });
>>>>>>> estudandoooo

    var install = {};
    Object.defineProperty(install, "isAvailable", { get: function () { return promptTriggered; } });

<<<<<<< 0e8e765e12a7c688f1d6d860a24ebed0c3d55675
    // Stop it doing what it needs to do;
    e.preventDefault();
    deferredInstall = e;

    // Resolve the promise, to say that we know we can prompt.
    canPromptPromiseResolved();

    return false;
  });

  var install = {};

  Object.defineProperty(install, 'isAvailable', { get: function() { return promptTriggered; } });

  install.canPrompt = function() {
    return canPromptPromise;
  };

  install.prompt = function () {
    return new Promise(function(resolve, reject){
      if(promptTriggered === false) {
        // There can be a whole host or reasons, we should determine them
        reject('User Agent decided not to prompt');
      };

      deferredInstall.prompt().then(function() {
        return deferredInstall.userChoice
      }).then(function(choice) {
        resolve(choice.outcome);
      }).catch(function(reason) {
        reject(reason);
      });
    });
  };

  window.install = install;
})();
=======
    install.canPrompt = function () {
      return canPromptPromise;
    };

    install.prompt = function () {
      return new Promise(function (resolve, reject) {
        if (promptTriggered === false) {
          // There can be a whole host or reasons, we should determine them
          reject("User Agent decided not to prompt");
        };

        deferredInstall.prompt().then(function () {
          return handleInstall(deferredInstall.userChoice);
        }).then(function () {
          resolve();
        }).catch(function (reason) {
          reject(reason);
        });
      });
    };
    window.install = install;
  })();
>>>>>>> estudandoooo

  window.addEventListener('load', function () {
    var airhornEl = document.getElementById('airhorn');
    var installEl = document.getElementById('installer');
    var airhorn = new AirHorn(airhornEl);
    var installer = new Installer(installEl);
<<<<<<< 0e8e765e12a7c688f1d6d860a24ebed0c3d55675
    var ambient = new AmbientLightController(1);
    var isLooping = false;

    ambient.onUnderThreshold = function() {
      if(isLooping === false) {
        airhorn.start({ loop: true });
        isLooping = true;
      }
    };

    ambient.onOverThreshold = function() {
      airhorn.stop();
      isLooping = false;
    };

    if(location.hash == '#instant') {
      airhorn.start({ loop: false });
    }

    if(location.hash === "#dark") {
      ambient.start();
    }

    window.addEventListener('hashchange', function() {

      if(location.hash === "#dark") {
        ambient.start();
      }

      if(location.hash == '#instant') {
=======

    if (location.hash == "#instant") {
      airhorn.start({ loop: false });
    }

    window.addEventListener('hashchange', function () {
      if (location.hash == "#instant") {
>>>>>>> estudandoooo
        airhorn.start({ loop: false });
      }
    });

    document.addEventListener('visibilitychange', function() {
      if(document.hidden) {
        airhorn.stop();
      }
    });
  });
})();
